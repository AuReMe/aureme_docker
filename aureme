#!/usr/bin/env python3
"""
This file is part of AuReMe-workflow.

AuReMe-workflow is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, and as specified in the LICENSE file
attached.

AuReMe-workflow is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY. See the GNU General Public License and the
LICENSE file attached for more details.

You should have received a copy of the GNU General Public License
along with AuReMe-workflow. If not, see <http://www.gnu.org/licenses/>.

@author: Meziane AITE, meziane.aite@inria.fr
Description:
aureme launcher from /bin
To create a new run from the aureme default pipeline use the first usage.
To get a sample from the aureme default pipeline use the second usage.

usage:
	aureme --info [--cmd=STR]
	aureme --init=ID
	aureme --sample
	aureme --run=ID --cmd=STR [-q]
	aureme --run=ID --log=FILE [-q]
	aureme --version
 
options:
	-h --help     Show help.
	--init=ID    identifier of new run to initialize from the aureme default pipeline
	--sample    use this arg to get a sample from the aureme default pipeline
	--info    Show how to use differents commands in AuReMe default pipeline
	--cmd    The command line to execute in the specified run
	-q    Quite, do not writte in logs files
   --version    Check if the current version of the image used to create the container is the last one
"""
__version__ = "1.2.4"
try:
    import docopt
except ImportError:
    print("package docopt needed, use this cmd:\n pip install "
          + "docopt")
    exit()
import eventlet
import re
import requests
import subprocess

def main():
    global release_on_gitlab
    args = docopt.docopt(__doc__)
    aureme_template_path = "/home/data/run_template/aureme_template"
    aureme_sample_path = "/home/data/run_template/aureme_sample.tar.gz"
    release_on_gitlab = "https://gitlab.inria.fr/DYLISS/aureme/raw/master/release.txt"

    #always_check_version
    online_version = get_version()
    current_version = __version__
    if online_version:
        if online_version != current_version:
            print("/!\ WARNING, your Aureme is not up-to-date. You are using the version %s, the latest is %s" %(current_version, online_version))
            print("Check the Changelog here %s" %release_on_gitlab.replace("/raw/","/blob/"))
            print("To update AuReMe:")
            print("\tRemove your aureme-img and the container created from this image:")
            print("\t\t$sudo docker rmi -f docker.io/dyliss/aureme-img")
            print("\tCreate a new container with the new image:")
            print("\t\t$sudo docker run -ti -v /PATH/TO/AUREME_WORKSPACE:/shared --name=aureme docker.io/dyliss/aureme-img bash")
            print("\tObviously change /PATH/TO/AUREME_WORKSPACE to the real path of you AuReMe workspace")
    
    if args["--version"]:
        online_version = get_version()
        current_version = __version__
        if online_version:
            print("You are using the version %s, the latest is %s" %(current_version, online_version))
        else:
            print('No internet connection. Skip checking Aureme version.')

    elif args["--sample"]:
        cmd = "tar -zxf "+aureme_sample_path+" -C /shared"
        subprocess.call(cmd, shell=True, executable='/bin/bash')
        subprocess.call("chmod -R 777 /shared/aureme_sample", shell=True, executable='/bin/bash')

    elif args["--info"]:
        cmd = args["--cmd"]
        if cmd:
            info(cmd)
        else:
            print("---- How to use differents commands in AuReMe default pipeline ----")

            print("init:\tCreates a new run.")
            print("\tEx: aureme --init=test\n")

            print("getdb:\tGets available database in Aureme.")
            print("\tdisplays all available database, i.e all padmet files in /home/data/database/*")
            print("\tto choose a database to use in workflow, just modify in the config file the line DATA_BASE=.. by one path displayed (without file ext)")
            print("\tEx: aureme --run=test --cmd=getdb\n")

            print("check_input:\t1./Checks if the database given in config.txt exist (must be a padmet file) and check if sbml version exist, if no convert padmet to sbml.")
            print("\t\t2./Checks if fasta file for studied organism was given in GENOMIC_DATA/ file name must be FAA_study.faa.")
            print("\t\tIf no, checks if GBK was given (GBK_study.gbk) if yes, will convert GBK to FASTA, if no, pass.")
            print("\t\t3./Checks if fasta and sbml file of each model for orthology are using the same genes identifiers, check with the cutoff given in config.txt.")
            print("\t\tIf the rate is too high, Raise an error. A dictionnary can be used to convert the FASTA file, (dict_genes.txt)")
            print("\t\t4./Checks if seeds (growth_medium/seeds.txt), artefacts (set name in config) and targets (targets_compounds/targets.txt were given.")
            print("\t\tIf yes and not already done create corresponding sbml(s)")
            print("\t\tEx: aureme --run=test --cmd=check_input\n")    

            print("curation:\tUpdates a padmet file in network/ folder given as arg 'NETWORK'.")
            print("\t\tThe update will overwritte NETWORK if NEW_NETWORK is not set.")
            print("\t\tTo add or delete reaction: nedd to copy reaction_to_add_delete.csv from manual_curation/data/template/ to manual_curation/data/ and complete the latter.")
            print("\t\tTo create new reactions: need to copy reaction_creator.csv from manual_curation/data/template/ to manual_curation/data/ and complete the latter.")
            print("\t\tBoth in the same time can also be perfomed")
            print("\t\tEx: aureme --run=test --cmd=curation NETWORK=my_network")
            print("\t\tEx: aureme --run=test --cmd=curation NETWORK=my_network NEW_NETWORK=new_network\n")

            print("annotation_based:\tFor each folder in annotation_based_reconstruction/ runs the annotation based reconstruction method.")
            print("\t\t\tIf pathwaytools (default): check if folder is a PGDB, if yes creates a sbml in network/output_annotation_based/folder_name/")
            print("\t\t\tEx: aureme --run=test --cmd=annotation_based\n")

            print("orthology_based:\tFor each folder in orthology_based_reconstruction/ runs the orthology based reconstruction method.")
            print("\t\t\tIf pantograph (default): for each folder, run in multiprocess, OMCL and INparanoid then pantograph to finally creates the sbml in network/outpur_orthology_based/folder_name/")
            print("\t\t\tNote that the original pantograph output is modified with post_pantograph_gbr to added missed reactions")
            print("\t\t\tEx: aureme --run=test --cmd=orthology_based\n")

            print("draft:\t1./Perfoms orthology and/or annotation based reconstruction if not alread done.")
            print("\t2./Merges all .sbml files found in folder network/ to create a draft network: network/draft.[padmet,sbml]")
            print("\tEx: aureme --run=test --cmd=draft\n")


    elif args["--init"]:
        	run_id = args["--init"]
        	cmd = "pushd "+aureme_template_path+"; make -s init RUN_ID="+run_id+"; popd"
        	subprocess.call(cmd, shell=True, executable='/bin/bash')
        	subprocess.call("chmod -R 777 /shared/"+run_id, shell=True, executable='/bin/bash')

    elif args["--run"]:
        run_id = args["--run"]
        cmd = args["--cmd"]
        quite = args["-q"]
        if quite:
                cmd_full = "pushd /shared/"+run_id+" > /dev/null; make -s "+cmd+"; popd > /dev/null"
        else:
                cmd_full = "pushd /shared/"+run_id+" > /dev/null; make -s "+cmd+" >> full_log.txt; popd > /dev/null"
                with open("/shared/"+run_id+"/log.txt", 'a') as f:
                        f.write("aureme --run="+run_id+" --cmd=\""+cmd+"\"\n")
        print("Running command: %s in %s" %(cmd, run_id))
        subprocess.call(cmd_full, shell=True, executable='/bin/bash')


def info(cmd):
    if cmd == "init":
        print("init:\tCreates a new run")
        print("\tEx: aureme --init=test\n")
        print("Positional arguments:")
        print("--run\trun name.")

    elif cmd == "getdb":
        print("getdb:\tGets available database in Aureme.")
        print("\tdisplays all available database, i.e all padmet files in /home/data/database/*")
        print("\tto choose a database to use in workflow, just modify in the config file the line DATA_BASE=.. by one path displayed (without file ext)")
        print("\tEx: aureme --run=test --cmd=getdb")

    elif cmd == "check_input":
        print("check_input:\t1./Checks if the database given in config.txt exist (must be a padmet file) and checks if sbml version exist, if no converts padmet to sbml.")
        print("\t\t2./Checks if fasta file for studied organism was given in GENOMIC_DATA/ file name must be FAA_study.faa.")
        print("\t\tIf no, checks if GBK was given (GBK_study.gbk) if yes, will convert GBK to FASTA, if no, pass.")
        print("\t\t3./Checks if fasta and sbml file of each model for orthology are using the same genes identifiers, checks with the cutoff given in config.txt.")
        print("\t\tIf the rate is too high, Raise an error. A dictionnary can be used to convert the FASTA file, (dict_genes.txt)")
        print("\t\t4./Checks if seeds (growth_medium/seeds.txt), artefacts (set name in config) and targets (targets_compounds/targets.txt were given.")
        print("\t\tIf yes and not already done create corresponding sbml(s)")
        print("\t\tEx: aureme --run=test --cmd=check_input")

    elif cmd == "curation":
        print("curation:\tUpdates a padmet file in network/ folder given as arg 'NETWORK'.")
        print("\t\tThe update will overwritte NETWORK if NEW_NETWORK is not set.")
        print("\t\tTo add or delete reaction: copy reaction_to_add_delete.csv from manual_curation/data/template/ to manual_curation/data/ and complete the latter.")
        print("\t\tTo create new reactions: copy reaction_creator.csv from manual_curation/data/template/ to manual_curation/data/ and complete the latter.")
        print("\t\tBoth in the same time can also be perfomed")
        print("\t\tFinally, history files are created for both curation in manual_curation/history/")
        print("\tEx: aureme --run=test --cmd=curation NETWORK=my_network\n")
        print("Positional arguments:")
        print("NETWORK\tNetwork name (file name without extension.\n")

    elif cmd == "annotation_based":
        print("annotation_based:\tFor each folder in annotation_based_reconstruction/ runs the annotation based reconstruction method.")
        print("\t\t\tIf pathwaytools (default): check if folder is a PGDB, if yes create a sbml in network/output_annotation_based/folder_name/")
        print("\t\t\tEx: aureme --run=test --cmd=annotation_based\n")

    elif cmd == "orthology_based":
        print("orthology_based:\tFor each folder in orthology_based_reconstruction/ runs the orthology method.")
        print("\t\t\tIf pantograph (default): for each folder, run in multiprocess, OMCL and INparanoid then pantograph to finally create the sbml in network/outpur_orthology_based/folder_name/")
        print("\t\t\tNote that the original pantograph output is modified with post_pantograph_gbr to added missed reactions")
        print("\t\t\tEx: aureme --run=test --cmd=orthology_based\n")

    elif cmd == "set_medium":
        print("set_medium:\t1./If seeds file found in growth_medium, add transports reaction for each compound.")
        print("\t2./Add ExchangeSeed_[compound-id]: 1 [compound-id]-[C-BOUNDARY] => 1 [compound-id]-[e]")
        print("\t3./Add TransportSeed_[compound-id]: 1 [compound-id]-[e] => 1 [compound-id]-[c]")
        print("\tEx: aureme --run=test --cmd='set_medium --NETWORK=draft --NEW_NETWORK=draft_medium'\n")

    elif cmd == "draft":
        print("draft:\t1./Perfoms orthology and/or annotation based reconstruction if not alread done.")
        print("\t2./Merges all .sbml files found in folder network/ to create a draft network: network/draft.[padmet,sbml]")
        print("\tEx: aureme --run=test --cmd=draft\n")

    elif cmd == "gap_filling":
        print("Gapfill the padmet file in network/ folder given as arg 'NETWORK' the update will overwritte NETWORK if NEW_NETWORK is not set The gap-filling method is set in config.txt. If meneco (default): Run meneco on NETWORK, the original output is in gapfilling/original_output/, an enhanced version is created in the parent directory in this file it is possible to select the reactions to add from the given solution.")

    elif cmd == "gap_filling_solution":
        print("Will only give the gap filling solution without filling the NETWORK allowing to select the reactions to add")

    elif cmd == "set_fba":
        print("Set the reaction to test (ID) in fba. Just set to '1' the objective coefficient of this reaction")

    elif cmd == "test_fba":
        print("Run fba on the NETWORK, output is in analysis/flux_analysis")
    
    elif cmd == "menecheck":
        print("Run topological analysis on the NETWORK, output is in analysis/topological_analysis")

    elif cmd == "R":
        print("Open data access from host")
    
    else:
        print("Command not in: init, R, check_input, curation, annotation_based, orthology_based, draft, gap_filling, gap_filling_solution, set_fba, test_fba, menecheck")

def get_version():
    '''
    Get version from Gitlab.
    Check internet connection using requests and eventlet timeout.
    '''
    eventlet.monkey_patch()
    reg_version = r'^\#+VERSION:([0-9.]*)#+'
    with eventlet.Timeout(2):
        try:
            response = requests.get(release_on_gitlab)
            first_line = response.text.split('\n')[0]
            version = re.match(reg_version,first_line).group(1)
        except eventlet.timeout.Timeout:
            print('No internet connection. Skip checking Aureme version.')
            version = None
    return version

if __name__ == "__main__":
    main()
